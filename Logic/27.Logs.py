"""
 * EJERCICIO:
 * Explora el concepto de "logging" en tu lenguaje. Config√∫ralo y muestra
 * un ejemplo con cada nivel de "severidad" disponible.
"""
import logging

# Configuraci√≥n del logging
logging.basicConfig(
    level=logging.DEBUG,  # Nivel m√≠nimo a registrar
    format='[%(levelname)s] %(asctime)s - %(message)s',
    datefmt='%H:%M:%S'
)

# Ejemplos por nivel
logging.debug("Este es un mensaje DEBUG: √∫til para desarrollo.")
logging.info("Este es un mensaje INFO: todo funciona correctamente.")
logging.warning("Este es un WARNING: algo inesperado ha ocurrido.")
logging.error("Este es un ERROR: algo ha fallado.")
logging.critical("Este es un CRITICAL: fallo cr√≠tico del sistema.")

"""
 * DIFICULTAD EXTRA (opcional):
 * Crea un programa ficticio de gesti√≥n de tareas que permita a√±adir, eliminar
 * y listar dichas tareas.
 * - A√±adir: recibe nombre y descripci√≥n.
 * - Eliminar: por nombre de la tarea.
 * Implementa diferentes mensajes de log que muestren informaci√≥n seg√∫n la 
 * tarea ejecutada (a tu elecci√≥n).
 * Utiliza el log para visualizar el tiempo de ejecuci√≥n de cada tarea. 
"""
import logging
import time

# Configuraci√≥n del logging
logging.basicConfig(
    level=logging.DEBUG,
    format='[%(levelname)s] %(asctime)s - %(message)s',
    datefmt='%H:%M:%S'
)

# Lista de tareas
tareas = []

# Funci√≥n para a√±adir tarea
def a√±adir_tarea(nombre, descripcion):
    start_time = time.time()  # Empezamos a medir el tiempo de ejecuci√≥n
    tareas.append({'nombre': nombre, 'descripcion': descripcion})
    end_time = time.time()  # Fin de la medici√≥n del tiempo
    execution_time = end_time - start_time
    logging.info(f'‚úîÔ∏è Tarea a√±adida: {nombre}')
    logging.debug(f'‚è± Tiempo de ejecuci√≥n de a√±adir_tarea: {execution_time:.4f} segundos')

# Funci√≥n para eliminar tarea
def eliminar_tarea(nombre):
    start_time = time.time()
    tarea_encontrada = False
    for tarea in tareas:
        if tarea['nombre'] == nombre:
            tareas.remove(tarea)
            tarea_encontrada = True
            break
    end_time = time.time()
    execution_time = end_time - start_time
    if tarea_encontrada:
        logging.info(f'‚úîÔ∏è Tarea eliminada: {nombre}')
    else:
        logging.warning(f'‚ö†Ô∏è Tarea no encontrada: {nombre}')
    logging.debug(f'‚è± Tiempo de ejecuci√≥n de eliminar_tarea: {execution_time:.4f} segundos')

# Funci√≥n para listar tareas
def listar_tareas():
    logging.info('üìã Listando tareas actuales:')
    if tareas:
        for tarea in tareas:
            logging.info(f'üìù {tarea["nombre"]}: {tarea["descripcion"]}')
    else:
        logging.warning('‚ö†Ô∏è No hay tareas en la lista.')

# Ejemplo de uso
if __name__ == '__main__':
    a√±adir_tarea('Comprar leche', 'Ir al supermercado y comprar leche.')
    a√±adir_tarea('Estudiar Python', 'Practicar programaci√≥n en Python para mejorar habilidades.')
    listar_tareas()
    eliminar_tarea('Comprar leche')
    listar_tareas()
